# set the working directoyy
setwd()
getwd()
# installs required
install.packages('tidyverse')
library(tidyverse)
if (!require("gplots")) {
  install.packages("gplots", dependencies = TRUE)
  library(gplots)
}
if (!require("RColorBrewer")) {
  install.packages("RColorBrewer", dependencies = TRUE)
  library(RColorBrewer)
}
library(gplots)
library(RColorBrewer)

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("pcaMethods")
library(pcaMethods)

library('VennDiagram')

library(tximport)
library(tidyverse)
library(GenomicFeatures)
library(DelayedArray) 
library(DESeq2)
library(magrittr)

library(readr)
annotation <- read_csv("annotation.csv")

#load DEG files previously created and filter for gene name and fold change 
C_DEX_all_genes_total <- read_csv('csv/C_DEX_all_genes_total.csv') %>% 
  dplyr::select(gene_name, FC_total)
C_DEX_all_genes_80S <- read_csv('csv/C_DEX_all_genes_80S.csv') %>% 
  dplyr::select(gene_name, FC_80S) 
C_DEX_all_genes_poly <- read_csv('csv/C_DEX_all_genes_poly.csv') %>% 
  dplyr::select(gene_name, FC_poly) 

KD_DEX_all_genes_total <- read_csv('csv/KD_DEX_all_genes_total.csv')%>% 
  dplyr::select(gene_name, FC_total) 
KD_DEX_all_genes_80S <- read_csv('csv/KD_DEX_all_genes_80S.csv')%>% 
  dplyr::select(gene_name, FC_80S) 
KD_DEX_all_genes_poly <- read_csv('csv/KD_DEX_all_genes_poly.csv') %>% 
  dplyr::select(gene_name, FC_poly)  

#load expression files and change log2foldchange to FC
dex_total <- read_csv('results_control_DEXcomparison_total.csv')%>% 
  dplyr::select(gene_ID, log2FoldChange)%>% 
  dplyr::rename(FC_total = log2FoldChange)
dex_80S <-  read_csv('results_control_DEXcomparison_outlier_80S.csv')%>% 
  dplyr::select(gene_ID, log2FoldChange)%>% 
  dplyr::rename(FC_80S = log2FoldChange)
dex_poly <- read_csv('results_control_DEXcomparison_poly.csv')%>% 
  dplyr::select(gene_ID, log2FoldChange)%>% 
  dplyr::rename(FC_poly = log2FoldChange)

KD_dex_total <- read_csv('results_knockdown_DEXcomparison_total.csv')%>% 
  dplyr::select(gene_ID, log2FoldChange)%>% 
  dplyr::rename(FC_total = log2FoldChange)
KD_dex_80S <-  read_csv('results_knockdown_DEXcomparison_outlier_80S.csv')%>% 
  dplyr::select(gene_ID, log2FoldChange)%>% 
  dplyr::rename(FC_80S = log2FoldChange)
KD_dex_poly <- read_csv('results_knockdown_DEXcomparison_poly.csv')%>% 
  dplyr::select(gene_ID, log2FoldChange)%>% 
  dplyr::rename(FC_poly = log2FoldChange)

#join annotation file to ensembl id for significant DEGs
dex_total <- inner_join(annotation, dex_total, by = 'gene_ID')
dex_80S <- inner_join(annotation, dex_80S, by = 'gene_ID')
dex_poly <- inner_join(annotation, dex_poly, by = 'gene_ID')

KD_dex_total <- inner_join(annotation, KD_dex_total, by = 'gene_ID')
KD_dex_80S <- inner_join(annotation, KD_dex_80S, by = 'gene_ID')
KD_dex_poly <- inner_join(annotation, KD_dex_poly, by = 'gene_ID')

#get ensemble ID for NA genes
total_NA <- dex_total %>% 
  dplyr::filter(is.na (gene_name)) %>% 
  dplyr::select(-gene_name) %>% 
  dplyr::rename(gene_name = 'gene_ID')

mono_NA <- dex_80S %>% 
  dplyr::filter(is.na (gene_name)) %>% 
  dplyr::select(-gene_name) %>% 
  dplyr::rename(gene_name = 'gene_ID')

poly_NA <- dex_poly %>% 
  dplyr::filter(is.na (gene_name)) %>% 
  dplyr::select(-gene_name) %>% 
  dplyr::rename(gene_name = 'gene_ID')

KD_total_NA <- KD_dex_total %>% 
  dplyr::filter(is.na (gene_name)) %>% 
  dplyr::select(-gene_name) %>% 
  dplyr::rename(gene_name = 'gene_ID')

KD_mono_NA <- KD_dex_80S %>% 
  dplyr::filter(is.na (gene_name)) %>% 
  dplyr::select(-gene_name) %>% 
  dplyr::rename(gene_name = 'gene_ID')

KD_poly_NA <- KD_dex_poly %>% 
  dplyr::filter(is.na (gene_name)) %>% 
  dplyr::select(-gene_name) %>% 
  dplyr::rename(gene_name = 'gene_ID')

#join ensemble ID NAs with gene names and remove NAs from gene name
dex_total <- full_join(total_NA, dex_total) %>% 
  dplyr::filter(!is.na(gene_name))
head(dex_total)

dex_80S <- full_join(mono_NA, dex_80S) %>% 
  dplyr::filter(!is.na(gene_name))
head(dex_80S)

dex_poly <- full_join(poly_NA, dex_poly) %>% 
  dplyr::filter(!is.na(gene_name))
head(dex_poly)

KD_dex_total <- full_join(KD_total_NA, KD_dex_total) %>% 
  dplyr::filter(!is.na(gene_name))
head(KD_dex_total)

KD_dex_80S <- full_join(KD_mono_NA, KD_dex_80S) %>% 
  dplyr::filter(!is.na(gene_name))
head(KD_dex_80S)

KD_dex_poly <- full_join(KD_poly_NA, KD_dex_poly) %>% 
  dplyr::filter(!is.na(gene_name))
head(KD_dex_poly)

#removing 5th column (which is empty gene list)
dex_total <- dex_total[, -3]
dex_80S <- dex_80S[, -3]
dex_poly <- dex_poly[, -3]
KD_dex_total <- KD_dex_total[, -3]
KD_dex_80S <- KD_dex_80S[, -3]
KD_dex_poly <- KD_dex_poly[, -3]

#can write as csv here if you want full list as gene names not ensembl


#TOTAL: get FC levels from expressed KD, that significantly change in C 
total_KD <- semi_join(KD_dex_total,dex_p_total)%>% 
  dplyr::select(gene_name, FC_total)
#80S: get FC levels from expressed KD, that significantly change in C 
mono_KD <- semi_join(KD_dex_80S, dex_p_80S)%>% 
  dplyr::select(gene_name, FC_80S)
#POLY: get FC levels from expressed KD, that significantly change in C 
poly_KD <- semi_join(KD_dex_poly, dex_p_poly)%>% 
  dplyr::select(gene_name, FC_poly)
 
#stopped here as object has 0 obsevations

#join each with the DEGs in control fractions (didnt get this far but if I did it doesnt work either as only has 2 columns... should have one for DEGs in C and FC in KD)
total <- full_join(dex_p_total, total_KD)

#join significant control and KD datasets (for separate heatmap of only DEGs)
total_join <- full_join(C_DEX_all_genes_total, KD_DEX_all_genes_total, by = 'gene_name')
mono_join <- full_join(C_DEX_all_genes_80S, KD_DEX_all_genes_80S, by = 'gene_name')
poly_join <- full_join(C_DEX_all_genes_poly, KD_DEX_all_genes_poly, by = 'gene_name')

write_csv(total_join, file = 'csv/C_KD_DEX_total.csv')
write_csv(mono_join, file = 'csv/C_KD_DEX_mono.csv')
write_csv(poly_join, file = 'csv/C_KD_DEX_poly.csv')

# make it into a matrix to draw heatmap
total_join <- as.data.frame(total_join) # otherwise the rownames do not show in the heatmap
row.names(total_join) <- total_join$gene_name # assign labels in column gene_ID as rownames
total_join$gene_name <-  NULL  # enables making a matrix in the next step with only numerical values
expmatrix_total <- as.matrix(total_join)  
summary(expmatrix_total)

#create venn diagrams to show the overlap between C and KD
C_T_Venn <- C_DEX_all_genes_total %>% 
  select(gene_name) 
KD_T_Venn <- KD_DEX_all_genes_total %>% 
  select(gene_name)

input <- list(C_T_Venn, KD_T_Venn)
venn(input)

mono_join <- as.data.frame(mono_join) # otherwise the rownames do not show in the heatmap
row.names(mono_join) <- mono_join$gene_name # assign labels in column gene_ID as rownames
mono_join$gene_name <-  NULL  # enables making a matrix in the next step with only numerical values
expmatrix_80S <- as.matrix(mono_join)  
summary(expmatrix_80S)

#create venn diagrams to show the overlap between C and KD
C_80S_Venn <- C_DEX_all_genes_80S %>% 
  select(gene_name) 
KD_80S_Venn <- KD_DEX_all_genes_80S %>% 
  select(gene_name)

input <- list(C_80S_Venn, KD_80S_Venn)
venn(input)

poly_join <- as.data.frame(poly_join) # otherwise the rownames do not show in the heatmap
row.names(poly_join) <- poly_join$gene_name # assign labels in column gene_ID as rownames
poly_join$gene_name <-  NULL  # enables making a matrix in the next step with only numerical values
expmatrix_poly <- as.matrix(poly_join)  
summary(expmatrix_poly)

#create venn diagrams to show the overlap between C and KD
C_poly_Venn <- C_DEX_all_genes_poly %>% 
  select(gene_name) 
KD_poly_Venn <- KD_DEX_all_genes_poly %>% 
  select(gene_name)

input <- list(C_poly_Venn, KD_poly_Venn)
venn(input)

#trying new color packs
install.packages("viridis")
library(viridis)

# creates a own color palette from red to green
my_palette <- colorRampPalette(c("green", "white", "magenta"))(n = 999)
my_palette <- colorRampPalette(bluered(n=999))
my_palette <- colorRampPalette(plasma(n=999))
my_palette <- colorRampPalette(viridis(n=999))
colors <- c(seq(-2.5,-0.11,length=450),seq(-0.1,0.1,length=100),seq(0.11,2.5,length=450))

# creates a 5 x 5 inch image
png("heatmap_total_C_KD_DEX.png",    # create PNG for the heat map        
    width = 5*300,        # 5 x 300 pixels
    height = 5*300,
    res = 300,            # 300 pixels per inch
    pointsize = 8)        # smaller font size

#USE FIRST LINE FOR HEATMAP WITH COLOR BREAKS
heatmap.2(expmatrix_total,Colv= NULL,Rowv= NULL,  col= my_palette, trace="none", na.color="black", scale="none", margin=c(8, 10), cexRow=0.4, cexCol=0.9, main="DEGs Total", ylab="Differentially Expressed Genes")

dev.off()               # close the PNG device

png("heatmap_80S_C_KD_DEX.png",    # create PNG for the heat map        
    width = 5*300,        # 5 x 300 pixels
    height = 5*300,
    res = 300,            # 300 pixels per inch
    pointsize = 8)        # smaller font size

#USE FIRST LINE FOR HEATMAP WITH COLOR BREAKS
heatmap.2(expmatrix_80S,Colv= NULL,Rowv= NULL,  col= my_palette, trace="none", na.color="black", scale="none", margin=c(8, 10), cexRow=0.4, cexCol=0.9, main="DEGs 80S", ylab="Differentially Expressed Genes")

dev.off()               # close the PNG device

png("heatmap_poly_C_KD_DEX.png",    # create PNG for the heat map        
    width = 5*300,        # 5 x 300 pixels
    height = 5*300,
    res = 300,            # 300 pixels per inch
    pointsize = 8)        # smaller font size

#USE FIRST LINE FOR HEATMAP WITH COLOR BREAKS
heatmap.2(expmatrix_poly,Colv= NULL,Rowv= NULL,  col= my_palette, trace="none", na.color="black", scale="none", margin=c(8, 10), cexRow=0.4, cexCol=0.9, main="DEGs Poly", ylab="Differentially Expressed Genes")

dev.off()   
